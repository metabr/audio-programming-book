# SConstruct for Developing Audio Applications with the Csound Host API
# examples and projects
# (c) R Walsh, 2009

import os
import sys

# Simple function to Detect OPERATING SYSTEM.
def getPlatform():
    if sys.platform[:5] == 'linux':
        return 'linux'
    elif sys.platform[:3] == 'win':
        return 'win32'
    elif sys.platform[:6] == 'darwin':
        return 'darwin'
    else:
        return 'unsupported'

print "\nPlatform is: "
print getPlatform()
print "\n"

#add paths for csound header files, these need to be edited according to where you have installed Csound!
if getPlatform() == 'win32':
	#set the environment for the build and tell scons to use mingw. Scons
	#will use MSVC by default if both MSVC and mingw are installed
	env = Environment(tools = ['mingw'], ENV = {'PATH' : os.environ['PATH'], 'TEMP' : os.environ ['TEMP']}) 
	#alter this path so it points to where you have the Csound  and wxWidgets libs and headers
	env.Append(LIBPATH = ['C:/MyDocuments/SourceCode/Csound5/csound5'])
	env.Append(CPPPATH = ['C:/MyDocuments/SourceCode/Csound5/csound5/H','C:/MyDocuments/SourceCode/Csound5/csound5/interfaces'])
elif getPlatform() == 'linux':
	env =  Environment(ENV = {'PATH' : os.environ['PATH']})
	env.Append(LIBPATH = ['/home/rory/SourceCode/csound/csound5'])
	env.Append(CPPPATH = ['/home/rory/SourceCode/csound/csound5/H', '/home/rory/SourceCode/csound/csound5/interfaces'])
elif getPlatform() == 'darwin':
	env =  Environment(ENV = {'PATH' : os.environ['PATH']})
	env.Append(CPPPATH = ['/Library/Frameworks/CsoundLib.framework/Versions/Current/headers', '/usr/include'])
	env.Append(LIBPATH = ['/Library/Frameworks/CsoundLib.framework/Versions/Current/'])		

#add linker options here, they will differ for each different OS
if getPlatform() == 'linux':
	# csound lib
	env.Append(LIBS = ['csound', 'pthread', 'dl', 'sndfile', 'm', 'csnd'])
elif getPlatform() == 'win32':
	# csound libs   	
	env.Append(LIBS = ['csound','csnd'])
elif getPlatform() == 'darwin':
	# csound framework   	
	env.Append(LINKFLAGS = ['-framework', 'CsoundLib'])
	env.Append(LIBS = ['_csnd'])
	

#check to see that our header files are present and can be found by the compiler
configure = env.Configure()
sane = configure.CheckHeader("stdio.h", language="C")
if not sane:
	print "\n*** BUILD ERROR: there is a problem with your C/C++ compiler"
	print "  =>please check it before proceeding\n"
#	sys.exit()

csound = configure.CheckHeader("csound.h", language="C")
if not csound:
	print "\n***BUILD ERROR:csound header not found"
	print "\n   Make sure you have specified the correct path"
	print "\n   to your Csound5 'H' directory and the Csound"
	print "\n   interfaces directory"
#	sys.exit()

if sane and csound:
 print "\n*** BUILDING PROGRAMS:"
 print "     example1, example2, example3, example4, example5" 
 print "     example6, example7, example8, example9, example10"

example1 = env.Program('example1', 'example1.c')
example1 = env.Program('example2', 'example2.c')
example1 = env.Program('example3', 'example3.c')
example1 = env.Program('example4', 'example4.c')
example1 = env.Program('example5', 'example5.c')
example1 = env.Program('example6', 'example6.c')
example1 = env.Program('example7', 'example7.cpp')
example1 = env.Program('example8', 'example8.cpp')
example1 = env.Program('example9', 'example9.cpp')
example1 = env.Program('example10', 'example10.cpp') 
 
# you can add here your own projects here
# use this format:
# project = env.Program('project', 'source.c')
# where project is the name of your new program 
# and source

