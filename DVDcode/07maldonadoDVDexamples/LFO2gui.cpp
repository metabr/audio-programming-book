// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "LFO2gui.h"

inline void LFO2gui::cb_joy_i(Fl_Positioner*, void*) {
  joy_callback();
}
void LFO2gui::cb_joy(Fl_Positioner* o, void* v) {
  ((LFO2gui*)(o->parent()->user_data()))->cb_joy_i(o,v);
}

inline void LFO2gui::cb_Sine_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(0);
}
void LFO2gui::cb_Sine(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Sine_i(o,v);
}

inline void LFO2gui::cb_Triangle_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(1);
}
void LFO2gui::cb_Triangle(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Triangle_i(o,v);
}

inline void LFO2gui::cb_Up_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(2);
}
void LFO2gui::cb_Up(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Up_i(o,v);
}

inline void LFO2gui::cb_Down_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(3);
}
void LFO2gui::cb_Down(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Down_i(o,v);
}

inline void LFO2gui::cb_Square_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(4);
}
void LFO2gui::cb_Square(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Square_i(o,v);
}

inline void LFO2gui::cb_Random_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(5);
}
void LFO2gui::cb_Random(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Random_i(o,v);
}

inline void LFO2gui::cb_Sine1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(0);
}
void LFO2gui::cb_Sine1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Sine1_i(o,v);
}

inline void LFO2gui::cb_Triangle1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(1);
}
void LFO2gui::cb_Triangle1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Triangle1_i(o,v);
}

inline void LFO2gui::cb_Up1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(2);
}
void LFO2gui::cb_Up1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Up1_i(o,v);
}

inline void LFO2gui::cb_Down1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(3);
}
void LFO2gui::cb_Down1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Down1_i(o,v);
}

inline void LFO2gui::cb_Square1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(4);
}
void LFO2gui::cb_Square1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Square1_i(o,v);
}

inline void LFO2gui::cb_Random1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(5);
}
void LFO2gui::cb_Random1(Fl_Round_Button* o, void* v) {
  ((LFO2gui*)(o->parent()->parent()->user_data()))->cb_Random1_i(o,v);
}

inline void LFO2gui::cb_CarrierFreq_i(Fl_Slider*, void*) {
  carrier_freq_callback();
}
void LFO2gui::cb_CarrierFreq(Fl_Slider* o, void* v) {
  ((LFO2gui*)(o->parent()->user_data()))->cb_CarrierFreq_i(o,v);
}

LFO2gui::LFO2gui():PAstuff() {
  Fl_Window* w;
  { Fl_Window* o = mainWindow = new Fl_Window(496, 403, "Wavetable LFO example");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Positioner* o = joy = new Fl_Positioner(10, 25, 305, 305, "LFO (X controls frequency, Y controls amplitude)");
      o->box(FL_DOWN_BOX);
      o->color(44);
      o->selection_color(1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(56);
      o->callback((Fl_Callback*)cb_joy);
      o->align(FL_ALIGN_BOTTOM);
      o->when(3);
    }
    { Fl_Group* o = new Fl_Group(325, 25, 160, 150, "LFO shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color(41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(18);
      o->labelcolor(42);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(350, 45, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)cb_Sine);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 65, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Triangle);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 85, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Up);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 105, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Down);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 125, 85, 25, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Square);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 145, 85, 25, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Random);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(325, 180, 160, 150, "Carrier shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color(41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(18);
      o->labelcolor(42);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(350, 200, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)cb_Sine1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 220, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Triangle1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 240, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Up1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 260, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Down1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 285, 85, 15, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Square1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(350, 305, 85, 15, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Random1);
      }
      o->end();
    }
    { Fl_Slider* o = CarrierFreq = new Fl_Slider(10, 350, 475, 25, "Base frequency of the audio carrier:");
      o->type(5);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelcolor(0);
      o->value(0.3);
      o->callback((Fl_Callback*)cb_CarrierFreq);
    }
    make_menu();
    o->end();
  }
}

void LFO2gui::show() {
  mainWindow->show();
}

void LFO2gui::bye() {
  mainWindow->hide();
}

void LFO2gui::joy_callback() {
}

void LFO2gui::LFO_radio_callback(int i) {
}

void LFO2gui::carrier_radio_callback(int i) {
}

void LFO2gui::carrier_freq_callback() {
}
