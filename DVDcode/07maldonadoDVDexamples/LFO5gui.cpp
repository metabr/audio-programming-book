// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "LFO5gui.h"
void drawWaveform(Fl_DrawShape*);

Fl_DrawShape::Fl_DrawShape(int X, int Y, int W, int H, const char *l) : Fl_Box(X,Y,W,H,l) {
}

void Fl_DrawShape::draw() {
  Fl_Box::draw();
drawWaveform(this);
}

inline void LFO5gui::cb_joy_i(Fl_Positioner*, void*) {
  joy_callback(1);
}
void LFO5gui::cb_joy(Fl_Positioner* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_joy_i(o,v);
}

inline void LFO5gui::cb_joy1_i(Fl_Positioner*, void*) {
  joy_callback(2);
}
void LFO5gui::cb_joy1(Fl_Positioner* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_joy1_i(o,v);
}

inline void LFO5gui::cb_joy2_i(Fl_Positioner*, void*) {
  joy_callback(3);
}
void LFO5gui::cb_joy2(Fl_Positioner* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_joy2_i(o,v);
}

inline void LFO5gui::cb_joy3_i(Fl_Positioner*, void*) {
  joy_callback(4);
}
void LFO5gui::cb_joy3(Fl_Positioner* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_joy3_i(o,v);
}

inline void LFO5gui::cb_Sine_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(0);
}
void LFO5gui::cb_Sine(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Sine_i(o,v);
}

inline void LFO5gui::cb_Triangle_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(1);
}
void LFO5gui::cb_Triangle(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Triangle_i(o,v);
}

inline void LFO5gui::cb_Up_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(2);
}
void LFO5gui::cb_Up(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Up_i(o,v);
}

inline void LFO5gui::cb_Down_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(3);
}
void LFO5gui::cb_Down(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Down_i(o,v);
}

inline void LFO5gui::cb_Square_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(4);
}
void LFO5gui::cb_Square(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Square_i(o,v);
}

inline void LFO5gui::cb_Random_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(5);
}
void LFO5gui::cb_Random(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Random_i(o,v);
}

inline void LFO5gui::cb_Custom_i(Fl_Round_Button*, void*) {
  isAudio = false;
customWave();
}
void LFO5gui::cb_Custom(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

inline void LFO5gui::cb_Step_i(Fl_Round_Button*, void*) {
  stepSequencer();
}
void LFO5gui::cb_Step(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Step_i(o,v);
}

inline void LFO5gui::cb_Sine1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(0);
}
void LFO5gui::cb_Sine1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Sine1_i(o,v);
}

inline void LFO5gui::cb_Triangle1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(1);
}
void LFO5gui::cb_Triangle1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Triangle1_i(o,v);
}

inline void LFO5gui::cb_Up1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(2);
}
void LFO5gui::cb_Up1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Up1_i(o,v);
}

inline void LFO5gui::cb_Down1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(3);
}
void LFO5gui::cb_Down1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Down1_i(o,v);
}

inline void LFO5gui::cb_Square1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(4);
}
void LFO5gui::cb_Square1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Square1_i(o,v);
}

inline void LFO5gui::cb_Random1_i(Fl_Round_Button*, void*) {
  modulator_radio_callback(5);
}
void LFO5gui::cb_Random1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Random1_i(o,v);
}

inline void LFO5gui::cb_Custom1_i(Fl_Round_Button*, void*) {
  isAudio = true;
customWave();
}
void LFO5gui::cb_Custom1(Fl_Round_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_Custom1_i(o,v);
}

inline void LFO5gui::cb_CarrierFreq_i(Fl_Slider*, void*) {
  carrier_freq_callback();
}
void LFO5gui::cb_CarrierFreq(Fl_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_CarrierFreq_i(o,v);
}

inline void LFO5gui::cb_numSteps_i(Fl_Value_Input*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_numSteps(Fl_Value_Input* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_numSteps_i(o,v);
}

inline void LFO5gui::cb_Compute_i(Fl_Button*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_Compute(Fl_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_Compute_i(o,v);
}

inline void LFO5gui::cb_Exit_i(Fl_Return_Button* o, void*) {
  delete o->parent();
}
void LFO5gui::cb_Exit(Fl_Return_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

inline void LFO5gui::cb_stepLevel_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel_i(o,v);
}

inline void LFO5gui::cb_stepLevel1_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel1(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel1_i(o,v);
}

inline void LFO5gui::cb_stepLevel2_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel2(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel2_i(o,v);
}

inline void LFO5gui::cb_stepLevel3_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel3(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel3_i(o,v);
}

inline void LFO5gui::cb_stepLevel4_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel4(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel4_i(o,v);
}

inline void LFO5gui::cb_stepLevel5_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel5(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel5_i(o,v);
}

inline void LFO5gui::cb_stepLevel6_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel6(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel6_i(o,v);
}

inline void LFO5gui::cb_stepLevel7_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel7(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel7_i(o,v);
}

inline void LFO5gui::cb_stepLevel8_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel8(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel8_i(o,v);
}

inline void LFO5gui::cb_stepLevel9_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel9(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel9_i(o,v);
}

inline void LFO5gui::cb_stepLevela_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevela(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevela_i(o,v);
}

inline void LFO5gui::cb_stepLevelb_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevelb(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevelb_i(o,v);
}

inline void LFO5gui::cb_stepLevelc_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevelc(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevelc_i(o,v);
}

inline void LFO5gui::cb_stepLeveld_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLeveld(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLeveld_i(o,v);
}

inline void LFO5gui::cb_stepLevele_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevele(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevele_i(o,v);
}

inline void LFO5gui::cb_stepLevelf_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevelf(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevelf_i(o,v);
}

inline void LFO5gui::cb_stepLevel10_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel10(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel10_i(o,v);
}

inline void LFO5gui::cb_stepLevel11_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel11(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel11_i(o,v);
}

inline void LFO5gui::cb_stepLevel12_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel12(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel12_i(o,v);
}

inline void LFO5gui::cb_stepLevel13_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel13(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel13_i(o,v);
}

inline void LFO5gui::cb_stepLevel14_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel14(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel14_i(o,v);
}

inline void LFO5gui::cb_stepLevel15_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel15(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel15_i(o,v);
}

inline void LFO5gui::cb_stepLevel16_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel16(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel16_i(o,v);
}

inline void LFO5gui::cb_stepLevel17_i(Fl_Value_Slider*, void*) {
  stepSequencerCompute();
}
void LFO5gui::cb_stepLevel17(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->parent()->user_data()))->cb_stepLevel17_i(o,v);
}

inline void LFO5gui::cb_levelHarm_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm_i(o,v);
}

inline void LFO5gui::cb_levelHarm1_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm1(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm1_i(o,v);
}

inline void LFO5gui::cb_levelHarm2_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm2(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm2_i(o,v);
}

inline void LFO5gui::cb_levelHarm3_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm3(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm3_i(o,v);
}

inline void LFO5gui::cb_levelHarm4_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm4(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm4_i(o,v);
}

inline void LFO5gui::cb_levelHarm5_i(Fl_Value_Slider*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_levelHarm5(Fl_Value_Slider* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_levelHarm5_i(o,v);
}

inline void LFO5gui::cb_Compute1_i(Fl_Button*, void*) {
  customWave_callback(isAudio);
}
void LFO5gui::cb_Compute1(Fl_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_Compute1_i(o,v);
}

inline void LFO5gui::cb_Exit1_i(Fl_Return_Button* o, void*) {
  delete o->parent();
}
void LFO5gui::cb_Exit1(Fl_Return_Button* o, void* v) {
  ((LFO5gui*)(o->parent()->user_data()))->cb_Exit1_i(o,v);
}

LFO5gui::LFO5gui():PAstuff() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(801, 537, "Example of Multiple LFOs");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Positioner* o = joy[1] = new Fl_Positioner(5, 25, 230, 220, "LFO 1 (controls audio modulator freq.)");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)44);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_BLACK);
      o->callback((Fl_Callback*)cb_joy);
      o->align(130);
      o->when(3);
    }
    { Fl_Positioner* o = joy[2] = new Fl_Positioner(250, 25, 230, 220, "LFO 2 (controls audio modulator amp.)");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)44);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_BLACK);
      o->callback((Fl_Callback*)cb_joy1);
      o->align(130);
      o->when(3);
    }
    { Fl_Positioner* o = joy[3] = new Fl_Positioner(5, 265, 230, 220, "LFO 3 (controls audio carrier freq.)");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)44);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_BLACK);
      o->callback((Fl_Callback*)cb_joy2);
      o->align(130);
      o->when(3);
    }
    { Fl_Positioner* o = joy[4] = new Fl_Positioner(250, 265, 230, 220, "Audio modulator base amp. and freq.");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)44);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_BLACK);
      o->callback((Fl_Callback*)cb_joy3);
      o->align(130);
      o->when(3);
    }
    { Fl_Group* o = new Fl_Group(490, 345, 155, 155, "LFO shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color((Fl_Color)41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(16);
      o->labelcolor((Fl_Color)42);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(510, 365, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Sine);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 380, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Triangle);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 395, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Up);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 410, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Down);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 425, 85, 25, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Square);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 440, 85, 25, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Random);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 455, 85, 25, "Custom set");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Custom);
        o->align(132|FL_ALIGN_INSIDE);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(510, 470, 125, 25, "Step Sequencer");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Step);
        o->align(132|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(650, 345, 145, 155, "Audio modulator shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color((Fl_Color)41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(16);
      o->labelcolor((Fl_Color)42);
      o->align(133|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(665, 385, 85, 20, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Sine1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 400, 85, 20, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Triangle1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 415, 85, 20, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Up1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 430, 85, 20, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Down1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 445, 85, 20, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Square1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 460, 85, 20, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Random1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(665, 475, 85, 20, "Custom set");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Custom1);
      }
      o->end();
    }
    { Fl_Slider* o = CarrierFreq = new Fl_Slider(140, 510, 650, 20, "Audio carrier base freq.");
      o->type(5);
      o->box(FL_FLAT_BOX);
      o->selection_color((Fl_Color)176);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->value(0.3);
      o->callback((Fl_Callback*)cb_CarrierFreq);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_DrawShape* o = LfoShape = new Fl_DrawShape(490, 5, 305, 165);
      o->box(FL_DOWN_BOX);
      o->color(FL_LIGHT3);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_DrawShape* o = CarrierShape = new Fl_DrawShape(490, 175, 305, 165);
      o->box(FL_DOWN_BOX);
      o->color(FL_LIGHT3);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    make_menu();
    o->end();
  }
}

Fl_Double_Window* LFO5gui::stepSequencer() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = stepSeqWindow = new Fl_Double_Window(425, 320, "Step sequencer");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = numSteps = new Fl_Value_Input(15, 50, 80, 25, "Number of active steps");
      o->labelsize(12);
      o->minimum(2);
      o->maximum(24);
      o->step(1);
      o->value(8);
      o->callback((Fl_Callback*)cb_numSteps);
      o->align(129);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = new Fl_Button(5, 245, 105, 30, "Compute");
      o->callback((Fl_Callback*)cb_Compute);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(5, 280, 105, 30, "Exit");
      o->callback((Fl_Callback*)cb_Exit);
    }
    { Fl_Scroll* o = new Fl_Scroll(115, 5, 302, 305);
      o->box(FL_DOWN_BOX);
      new Fl_Box(115, 125, 20, 25);
      { Fl_Value_Input* o = stepDur[0] = new Fl_Value_Input(125, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[0] = new Fl_Value_Slider(125, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[1] = new Fl_Value_Input(160, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[1] = new Fl_Value_Slider(160, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel1);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[2] = new Fl_Value_Input(195, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[2] = new Fl_Value_Slider(195, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel2);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[3] = new Fl_Value_Input(230, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[3] = new Fl_Value_Slider(230, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel3);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[4] = new Fl_Value_Input(275, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[4] = new Fl_Value_Slider(275, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel4);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[5] = new Fl_Value_Input(310, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[5] = new Fl_Value_Slider(310, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel5);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[6] = new Fl_Value_Input(345, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[6] = new Fl_Value_Slider(345, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel6);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[7] = new Fl_Value_Input(380, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[7] = new Fl_Value_Slider(380, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel7);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[8] = new Fl_Value_Input(430, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[8] = new Fl_Value_Slider(430, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel8);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[9] = new Fl_Value_Input(465, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[9] = new Fl_Value_Slider(465, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel9);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[10] = new Fl_Value_Input(500, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[10] = new Fl_Value_Slider(500, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevela);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[11] = new Fl_Value_Input(535, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[11] = new Fl_Value_Slider(535, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevelb);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[12] = new Fl_Value_Input(580, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[12] = new Fl_Value_Slider(580, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevelc);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[13] = new Fl_Value_Input(615, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[13] = new Fl_Value_Slider(615, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLeveld);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[14] = new Fl_Value_Input(650, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[14] = new Fl_Value_Slider(650, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevele);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[15] = new Fl_Value_Input(685, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[15] = new Fl_Value_Slider(685, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevelf);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[16] = new Fl_Value_Input(735, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[16] = new Fl_Value_Slider(735, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel10);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[17] = new Fl_Value_Input(770, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[17] = new Fl_Value_Slider(770, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel11);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[18] = new Fl_Value_Input(805, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[18] = new Fl_Value_Slider(805, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel12);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[19] = new Fl_Value_Input(840, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[19] = new Fl_Value_Slider(840, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel13);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[20] = new Fl_Value_Input(885, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[20] = new Fl_Value_Slider(885, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel14);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[21] = new Fl_Value_Input(920, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[21] = new Fl_Value_Slider(920, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel15);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[22] = new Fl_Value_Input(955, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[22] = new Fl_Value_Slider(955, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel16);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Input* o = stepDur[23] = new Fl_Value_Input(990, 255, 30, 25, "dur");
        o->labelsize(11);
        o->minimum(1);
        o->maximum(1000);
        o->step(0.25);
        o->value(1);
        o->textsize(11);
        o->align(129);
      }
      { Fl_Value_Slider* o = stepLevel[23] = new Fl_Value_Slider(990, 10, 30, 230);
        o->type(4);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_MAGENTA);
        o->labelsize(12);
        o->minimum(1);
        o->maximum(0);
        o->callback((Fl_Callback*)cb_stepLevel17);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
  stepSeqWindow->show();
  return w;
}

void LFO5gui::customWave() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = customWavWindow = new Fl_Double_Window(358, 313, "Custom set waveform");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = numHarm[0] = new Fl_Value_Input(145, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(1);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[0] = new Fl_Value_Slider(145, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[1] = new Fl_Value_Input(180, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(2);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[1] = new Fl_Value_Slider(180, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm1);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[2] = new Fl_Value_Input(215, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(3);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[2] = new Fl_Value_Slider(215, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm2);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[3] = new Fl_Value_Input(250, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(4);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[3] = new Fl_Value_Slider(250, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm3);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[4] = new Fl_Value_Input(285, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(5);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[4] = new Fl_Value_Slider(285, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm4);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[5] = new Fl_Value_Input(320, 265, 30, 25, "harm");
      o->labelsize(12);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(6);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[5] = new Fl_Value_Slider(320, 5, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_BLUE);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm5);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = new Fl_Button(10, 280, 70, 25, "Compute");
      o->callback((Fl_Callback*)cb_Compute1);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(85, 280, 50, 25, "Exit");
      o->callback((Fl_Callback*)cb_Exit1);
    }
    { Fl_Box* o = new Fl_Box(5, 170, 130, 100, "Build your custom wave with a sum of partials having various base shapes. You\
 can redefine the order number and amplitude of each partial, having the shape\
s listed above");
      o->labelsize(11);
      o->labelcolor((Fl_Color)176);
      o->align(132|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = new Fl_Group(5, 5, 135, 160, "Select the base shape, please");
      o->box(FL_ENGRAVED_FRAME);
      o->color((Fl_Color)41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)42);
      o->align(133|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = radioSine = new Fl_Round_Button(15, 40, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
      }
      { Fl_Round_Button* o = radioTriangle = new Fl_Round_Button(15, 60, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      { Fl_Round_Button* o = radioUpRamp = new Fl_Round_Button(15, 80, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      { Fl_Round_Button* o = radioDownRamp = new Fl_Round_Button(15, 100, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      { Fl_Round_Button* o = radioSquare = new Fl_Round_Button(15, 120, 85, 25, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      { Fl_Round_Button* o = radioLastWave = new Fl_Round_Button(15, 140, 85, 25, "Last Waveform");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
      }
      o->end();
    }
    o->end();
  }
  customWavWindow->show();
}

void LFO5gui::show() {
  mainWindow->show();
}

void LFO5gui::bye() {
  mainWindow->hide();
}

void LFO5gui::joy_callback(int i) {
}

void LFO5gui::LFO_radio_callback(int i) {
}

void LFO5gui::modulator_radio_callback(int i) {
}

void LFO5gui::carrier_freq_callback() {
}

void LFO5gui::customWave_callback(bool isCarr) {
}

void LFO5gui::stepSequencerCompute() {
}
