//
//  EAGLView.m
//  Spectral Template
//
//  Created by Anna Schmidt on 07.04.09.
//  Copyright Grafikdesign 2009. All rights reserved.
//



#import <QuartzCore/QuartzCore.h>
#import <OpenGLES/EAGLDrawable.h>

#import "EAGLView.h"

#define USE_DEPTH_BUFFER 0

// A class extension to declare private methods
@interface EAGLView ()

@property (nonatomic, retain) EAGLContext *context;
@property (nonatomic, assign) NSTimer *animationTimer;

- (BOOL) createFramebuffer;
- (void) destroyFramebuffer;

@end


@implementation EAGLView

@synthesize context;
@synthesize animationTimer;
@synthesize animationInterval;


// You must implement this method
+ (Class)layerClass {
    return [CAEAGLLayer class];
}


//The GL view is stored in the nib file. When it's unarchived it's sent -initWithCoder:
- (id)initWithCoder:(NSCoder*)coder {
    
    if ((self = [super initWithCoder:coder])) {
        // Get the layer
        CAEAGLLayer *eaglLayer = (CAEAGLLayer *)self.layer;
        
        eaglLayer.opaque = YES;
        eaglLayer.drawableProperties = [NSDictionary dictionaryWithObjectsAndKeys:
                                        [NSNumber numberWithBool:NO], kEAGLDrawablePropertyRetainedBacking, kEAGLColorFormatRGBA8, kEAGLDrawablePropertyColorFormat, nil];
        
        context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES1];
        
        if (!context || ![EAGLContext setCurrentContext:context]) {
            [self release];
            return nil;
        }
        
        animationInterval = 1.0 / 60.0;
		currentTextureColumn = 0;
    }
    return self;
}

- (void)setupAudio:(NSString *)file {
	
	//setup the audiocallback and read in a file
	audioCallback = [[RemoteIO alloc]initWithFile:file];
	//audioCallback = [[RemoteIO alloc]init];
	//start aurio callback
	[audioCallback initializeAudio];
	 
	[audioCallback stop];
	[audioCallback start];
	
}


- (void)setupViewForSpectrum
{
	glClearColor(0., 0., 0., 0.);
	
	spectrumRect = CGRectMake(10., 10., 460., 300.);
	
	// The bit buffer for the texture needs to be 512 pixels, because OpenGL textures are powers of 
	// two in either dimensions. Our texture is drawing a strip of 300 vertical pixels on the screen, 
	// so we need to step up to 512 (the nearest power of 2 greater than 300).
	//texBitBuffer = (float *)(malloc(sizeof(float) * 512));
	
	// Clears the view with black
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);	
	
	//set the entire texture to white
	for(int i = 0; i < MATRIX_COLUMNS; i++)
	{
		for(int j = 0; j < FFT_FRAMESIZE/2; j++)
		{
			texBitBuffer[i][j][0] = i;
			texBitBuffer[i][j][1] = 100;
			texBitBuffer[i][j][2] = i;
			texBitBuffer[i][j][3] = 0;
		}
	}
	
	glGenTextures(1, &texName);
	
	glBindTexture(GL_TEXTURE_2D, texName);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, MATRIX_COLUMNS, FFT_FRAMESIZE/2, 0, GL_RGBA, GL_UNSIGNED_BYTE, texBitBuffer);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	// Enable use of the texture
	glEnable(GL_TEXTURE_2D);
	// Set a blending function to use
	glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
	// Enable blending
	glEnable(GL_BLEND);
			
}

- (void)updateTexture{
	
	glBindTexture(GL_TEXTURE_2D, texName);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	
	for(int j = 0; j < FFT_FRAMESIZE/2; j++)
	{
		tempBuff[j] = (float)currentTextureColumn/255.f;
		
	}
	
	
	
	for(int i = 0; i < FFT_FRAMESIZE/2; i++)
	{
		
		texBitBuffer[currentTextureColumn][i][0] = (GLubyte) (255.0 * tempBuff[i]);
		texBitBuffer[currentTextureColumn][i][1] = (GLubyte) (255.0 * tempBuff[i]);
		texBitBuffer[currentTextureColumn][i][2] = (GLubyte) (255.0 * tempBuff[i]);
		texBitBuffer[currentTextureColumn][i][3] = 0;
		
		
	}
	
	if(currentTextureColumn < MATRIX_COLUMNS)
	{
		currentTextureColumn++;
	}
	else
	{
		currentTextureColumn = 0;
	}
	
	
	/*
	//Brute Force way - Optimize!!
	tmpFloatMatrix = [audioCallback channel1MagnitudeMatrix]; //[audioCallback channel1MagnitudePhasesBuffer];//audioCallback.channel1MagnitudePhasesBuffer();
	for(int i = 0; i < MATRIX_COLUMNS; i++)
	{
		for(int j = 0; j < FFT_FRAMESIZE/2; j++)
		{
			//printf("char wert%d\n", (GLubyte) (tmpFloatMatrix[i][j]*255.0));
			texBitBuffer[i][j][0] = (GLubyte) (fabs(tmpFloatMatrix[i][j])*255.0);
			texBitBuffer[i][j][1] = (GLubyte) (fabs(tmpFloatMatrix[i][j])*255.0);
			texBitBuffer[i][j][2] = (GLubyte) (fabs(tmpFloatMatrix[i][j])*255.0);
			texBitBuffer[i][j][3] = 0;
		}
	}
	*/
	
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, MATRIX_COLUMNS, FFT_FRAMESIZE/2, 0, GL_RGBA, GL_UNSIGNED_BYTE, texBitBuffer);
	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	
}


- (void)drawView {
    
    // Replace the implementation of this method to do your own custom drawing
    
    const GLfloat squareVertices[] = {
        0.0f, 0.0f,
        400.0f,  0.0f,
        0.0f,  300.0f,
        400.0f,   300.0f,
    };
    const GLubyte squareColors[] = {
        255, 255,   0, 255,
        0,   255, 255, 255,
        0,     0,   0,   0,
        255,   0, 255, 255,
    };
    
	GLshort texCoords[] = {
		0, 0, 
		1, 0, 
		0, 1,
		1, 1, 
	};
	
    [EAGLContext setCurrentContext:context];
    
    glBindFramebufferOES(GL_FRAMEBUFFER_OES, viewFramebuffer);
    glViewport(0, 0, backingWidth, backingHeight);
    
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrthof(0.0f, 480.0f, 0.0f, 320.0f, -1.0f, 1.0f);
    glMatrixMode(GL_MODELVIEW);
	glEnable(GL_TEXTURE);
	glEnable(GL_TEXTURE_2D);

    //glRotatef(3.0f, 0.0f, 0.0f, 1.0f);
    
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    
    glVertexPointer(2, GL_FLOAT, 0, squareVertices);
    glEnableClientState(GL_VERTEX_ARRAY);
    //glColorPointer(4, GL_UNSIGNED_BYTE, 0, squareColors);
    //glEnableClientState(GL_COLOR_ARRAY);
	glTexCoordPointer(2, GL_SHORT, 0, texCoords);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	
	[self updateTexture];
	
    glBindTexture(GL_TEXTURE_2D, texName);

    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glFlush();
	
    glBindRenderbufferOES(GL_RENDERBUFFER_OES, viewRenderbuffer);
    [context presentRenderbuffer:GL_RENDERBUFFER_OES];
}


- (void)layoutSubviews {
    [EAGLContext setCurrentContext:context];
    [self destroyFramebuffer];
    [self createFramebuffer];
    [self drawView];
}


- (BOOL)createFramebuffer {
    
    glGenFramebuffersOES(1, &viewFramebuffer);
    glGenRenderbuffersOES(1, &viewRenderbuffer);
    
    glBindFramebufferOES(GL_FRAMEBUFFER_OES, viewFramebuffer);
    glBindRenderbufferOES(GL_RENDERBUFFER_OES, viewRenderbuffer);
    [context renderbufferStorage:GL_RENDERBUFFER_OES fromDrawable:(CAEAGLLayer*)self.layer];
    glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES, GL_COLOR_ATTACHMENT0_OES, GL_RENDERBUFFER_OES, viewRenderbuffer);
    
    glGetRenderbufferParameterivOES(GL_RENDERBUFFER_OES, GL_RENDERBUFFER_WIDTH_OES, &backingWidth);
    glGetRenderbufferParameterivOES(GL_RENDERBUFFER_OES, GL_RENDERBUFFER_HEIGHT_OES, &backingHeight);
    
    if (USE_DEPTH_BUFFER) {
        glGenRenderbuffersOES(1, &depthRenderbuffer);
        glBindRenderbufferOES(GL_RENDERBUFFER_OES, depthRenderbuffer);
        glRenderbufferStorageOES(GL_RENDERBUFFER_OES, GL_DEPTH_COMPONENT16_OES, backingWidth, backingHeight);
        glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES, GL_DEPTH_ATTACHMENT_OES, GL_RENDERBUFFER_OES, depthRenderbuffer);
    }
    
    if(glCheckFramebufferStatusOES(GL_FRAMEBUFFER_OES) != GL_FRAMEBUFFER_COMPLETE_OES) {
        NSLog(@"failed to make complete framebuffer object %x", glCheckFramebufferStatusOES(GL_FRAMEBUFFER_OES));
        return NO;
    }
    
    return YES;
}


- (void)destroyFramebuffer {
    
    glDeleteFramebuffersOES(1, &viewFramebuffer);
    viewFramebuffer = 0;
    glDeleteRenderbuffersOES(1, &viewRenderbuffer);
    viewRenderbuffer = 0;
    
    if(depthRenderbuffer) {
        glDeleteRenderbuffersOES(1, &depthRenderbuffer);
        depthRenderbuffer = 0;
    }
}


- (void)startAnimation {
    self.animationTimer = [NSTimer scheduledTimerWithTimeInterval:animationInterval target:self selector:@selector(drawView) userInfo:nil repeats:YES];
}


- (void)stopAnimation {
    self.animationTimer = nil;
}


- (void)setAnimationTimer:(NSTimer *)newTimer {
    [animationTimer invalidate];
    animationTimer = newTimer;
}


- (void)setAnimationInterval:(NSTimeInterval)interval {
    
    animationInterval = interval;
    if (animationTimer) {
        [self stopAnimation];
        [self startAnimation];
    }
}


- (void)dealloc {
    
    [self stopAnimation];
    
    if ([EAGLContext currentContext] == context) {
        [EAGLContext setCurrentContext:nil];
    }
	[audioCallback cleanUp];
    [audioCallback release];
    [context release];  
    [super dealloc];
}

@end
