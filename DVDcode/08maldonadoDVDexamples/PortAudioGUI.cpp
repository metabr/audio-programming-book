// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "PortAudioGUI.h"
void bye();

void PortAudioGUI::cb_mnuChooseInput_i(Fl_Menu_*, void*) {
  isInput = true;
            chooseDevice();
}
void PortAudioGUI::cb_mnuChooseInput(Fl_Menu_* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_mnuChooseInput_i(o,v);
}

void PortAudioGUI::cb_mnuChooseOutput_i(Fl_Menu_*, void*) {
  isInput = false;
            chooseDevice();
}
void PortAudioGUI::cb_mnuChooseOutput(Fl_Menu_* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_mnuChooseOutput_i(o,v);
}

void PortAudioGUI::cb_menuStart_i(Fl_Menu_*, void*) {
  play();
}
void PortAudioGUI::cb_menuStart(Fl_Menu_* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_menuStart_i(o,v);
}

void PortAudioGUI::cb_menuStop_i(Fl_Menu_*, void*) {
  stop();
}
void PortAudioGUI::cb_menuStop(Fl_Menu_* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_menuStop_i(o,v);
}

void PortAudioGUI::cb_menuExit_i(Fl_Menu_*, void*) {
  bye();
}
void PortAudioGUI::cb_menuExit(Fl_Menu_* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_menuExit_i(o,v);
}

Fl_Menu_Item PortAudioGUI::menu_[] = {
 {"Audio setup", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Choose audio &input device", 0,  (Fl_Callback*)PortAudioGUI::cb_mnuChooseInput, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Choose audio &output device", 0,  (Fl_Callback*)PortAudioGUI::cb_mnuChooseOutput, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Start playing", 0,  (Fl_Callback*)PortAudioGUI::cb_menuStart, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sto&p playing", 0,  (Fl_Callback*)PortAudioGUI::cb_menuStop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)PortAudioGUI::cb_menuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Selected audio devs", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"No input device selected yet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"No output device selected yet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* PortAudioGUI::mnuChooseInput = PortAudioGUI::menu_ + 1;
Fl_Menu_Item* PortAudioGUI::mnuChooseOutput = PortAudioGUI::menu_ + 2;
Fl_Menu_Item* PortAudioGUI::menuStart = PortAudioGUI::menu_ + 3;
Fl_Menu_Item* PortAudioGUI::menuStop = PortAudioGUI::menu_ + 4;
Fl_Menu_Item* PortAudioGUI::menuExit = PortAudioGUI::menu_ + 5;
Fl_Menu_Item* PortAudioGUI::inDevMenu = PortAudioGUI::menu_ + 8;
Fl_Menu_Item* PortAudioGUI::outDevMenu = PortAudioGUI::menu_ + 9;

void PortAudioGUI::cb_brwDevSelect_i(Fl_Browser* o, void*) {
  selectDevice(o->value(), (int) o->data(o->value()), o->text(o->value()));
}
void PortAudioGUI::cb_brwDevSelect(Fl_Browser* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_brwDevSelect_i(o,v);
}

void PortAudioGUI::cb_OK_i(Fl_Return_Button*, void*) {
  if (isInput) openInput();
else openOutput();
delete chooseDev;
}
void PortAudioGUI::cb_OK(Fl_Return_Button* o, void* v) {
  ((PortAudioGUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

PortAudioGUI::PortAudioGUI() {
  inDevNum=-1;
outDevNum=-1;
}

PortAudioGUI::~PortAudioGUI() {
  bye();
}

void PortAudioGUI::make_menu() {
  Fl_Group* w;
  { Fl_Group* o = AudioMenuBar = new Fl_Group(0, 0, 240, 24);
    w = o;
    o->box(FL_FLAT_BOX);
    o->color(FL_BACKGROUND_COLOR);
    o->selection_color(FL_BACKGROUND_COLOR);
    o->labeltype(FL_NO_LABEL);
    o->labelfont(0);
    o->labelsize(14);
    o->labelcolor(FL_FOREGROUND_COLOR);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_TOP);
    o->when(FL_WHEN_RELEASE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 235, 20);
      o->box(FL_FLAT_BOX);
      o->menu(menu_);
    }
    o->end();
  }
}

void PortAudioGUI::chooseDevice() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = chooseDev = new Fl_Double_Window(476, 427, "Choose audio devices");
    w = o;
    o->user_data((void*)(this));
    { Fl_Browser* o = brwDevSelect = new Fl_Browser(5, 5, 465, 365, "Select an audio input device and press \"OK\"");
      o->type(2);
      o->color((Fl_Color)51);
      o->labelcolor((Fl_Color)80);
      o->textsize(10);
      o->callback((Fl_Callback*)cb_brwDevSelect);
      if (isInput){ chooseDev->label("Choose Audio Input"); o->label("Select an audio input device and press 'OK'"); }
      else {chooseDev->label("Choose Audio Output"); o->label("Select an audio output device and press 'OK'"); }
    }
    { Fl_Return_Button* o = new Fl_Return_Button(195, 390, 90, 30, "OK");
      o->callback((Fl_Callback*)cb_OK);
    }
    o->set_modal();
    o->end();
  }
  if (isInput) getAvailableInputs();
  else getAvailableOutputs();
  chooseDev->show();
}

void PortAudioGUI::getAvailableInputs() {
}

void PortAudioGUI::getAvailableOutputs() {
}

void PortAudioGUI::selectDevice(int i, int data, const char *text) {
}

void PortAudioGUI::openInput() {
}

void PortAudioGUI::openOutput() {
}

void PortAudioGUI::play() {
}

void PortAudioGUI::stop() {
}

void PortAudioGUI::bye() {
}
