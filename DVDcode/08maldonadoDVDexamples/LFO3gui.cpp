// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "LFO3gui.h"
void drawWaveform(Fl_DrawShape*);

Fl_DrawShape::Fl_DrawShape(int X, int Y, int W, int H, const char *l) : Fl_Box(X,Y,W,H,l) {
}

void Fl_DrawShape::draw() {
  Fl_Box::draw();
drawWaveform(this);
}

inline void LFO3gui::cb_joy_i(Fl_Positioner*, void*) {
  joy_callback();
}
void LFO3gui::cb_joy(Fl_Positioner* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_joy_i(o,v);
}

inline void LFO3gui::cb_Sine_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(0);
}
void LFO3gui::cb_Sine(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Sine_i(o,v);
}

inline void LFO3gui::cb_Triangle_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(1);
}
void LFO3gui::cb_Triangle(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Triangle_i(o,v);
}

inline void LFO3gui::cb_Up_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(2);
}
void LFO3gui::cb_Up(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Up_i(o,v);
}

inline void LFO3gui::cb_Down_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(3);
}
void LFO3gui::cb_Down(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Down_i(o,v);
}

inline void LFO3gui::cb_Square_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(4);
}
void LFO3gui::cb_Square(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Square_i(o,v);
}

inline void LFO3gui::cb_Random_i(Fl_Round_Button*, void*) {
  LFO_radio_callback(5);
}
void LFO3gui::cb_Random(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Random_i(o,v);
}

inline void LFO3gui::cb_Custom_i(Fl_Round_Button*, void*) {
  isCarrier = false;
customWave();
}
void LFO3gui::cb_Custom(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

inline void LFO3gui::cb_Sine1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(0);
}
void LFO3gui::cb_Sine1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Sine1_i(o,v);
}

inline void LFO3gui::cb_Triangle1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(1);
}
void LFO3gui::cb_Triangle1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Triangle1_i(o,v);
}

inline void LFO3gui::cb_Up1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(2);
}
void LFO3gui::cb_Up1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Up1_i(o,v);
}

inline void LFO3gui::cb_Down1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(3);
}
void LFO3gui::cb_Down1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Down1_i(o,v);
}

inline void LFO3gui::cb_Square1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(4);
}
void LFO3gui::cb_Square1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Square1_i(o,v);
}

inline void LFO3gui::cb_Random1_i(Fl_Round_Button*, void*) {
  carrier_radio_callback(5);
}
void LFO3gui::cb_Random1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Random1_i(o,v);
}

inline void LFO3gui::cb_Custom1_i(Fl_Round_Button*, void*) {
  isCarrier = true;
customWave();
}
void LFO3gui::cb_Custom1(Fl_Round_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->parent()->user_data()))->cb_Custom1_i(o,v);
}

inline void LFO3gui::cb_CarrierFreq_i(Fl_Slider*, void*) {
  carrier_freq_callback();
}
void LFO3gui::cb_CarrierFreq(Fl_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_CarrierFreq_i(o,v);
}

inline void LFO3gui::cb_levelHarm_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm_i(o,v);
}

inline void LFO3gui::cb_levelHarm1_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm1(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm1_i(o,v);
}

inline void LFO3gui::cb_levelHarm2_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm2(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm2_i(o,v);
}

inline void LFO3gui::cb_levelHarm3_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm3(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm3_i(o,v);
}

inline void LFO3gui::cb_levelHarm4_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm4(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm4_i(o,v);
}

inline void LFO3gui::cb_levelHarm5_i(Fl_Value_Slider*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_levelHarm5(Fl_Value_Slider* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_levelHarm5_i(o,v);
}

inline void LFO3gui::cb_Compute_i(Fl_Button*, void*) {
  customWave_callback(isCarrier);
}
void LFO3gui::cb_Compute(Fl_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_Compute_i(o,v);
}

inline void LFO3gui::cb_Exit_i(Fl_Return_Button* o, void*) {
  delete o->parent();
}
void LFO3gui::cb_Exit(Fl_Return_Button* o, void* v) {
  ((LFO3gui*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

LFO3gui::LFO3gui():PAstuff() {
  Fl_Window* w;
  { Fl_Window* o = mainWindow = new Fl_Window(747, 380, "Wavetable LFO example");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Positioner* o = joy = new Fl_Positioner(5, 25, 290, 290, "LFO (X controls frequency, Y controls amplitude)");
      o->box(FL_DOWN_BOX);
      o->color(46);
      o->selection_color(1);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(56);
      o->callback((Fl_Callback*)cb_joy);
      o->align(FL_ALIGN_BOTTOM);
      o->when(3);
    }
    { Fl_Group* o = new Fl_Group(300, 25, 105, 145, "LFO shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color(41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(15);
      o->labelcolor(42);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(305, 50, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Sine);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 65, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Triangle);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 80, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Up);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 95, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Down);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 110, 85, 25, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Square);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 125, 85, 25, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Random);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 140, 85, 25, "Custom");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Custom);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(300, 185, 105, 150, "Carrier shape");
      o->box(FL_ENGRAVED_FRAME);
      o->color(41);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(15);
      o->labelcolor(42);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Round_Button* o = new Fl_Round_Button(305, 210, 85, 25, "Sine");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Sine1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 225, 85, 25, "Triangle");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Triangle1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 240, 85, 25, "Up Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Up1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 255, 85, 25, "Down Ramp");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Down1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 270, 85, 25, "Square");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Square1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 285, 85, 25, "Random");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Random1);
      }
      { Fl_Round_Button* o = new Fl_Round_Button(305, 300, 85, 25, "Custom");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Custom1);
      }
      o->end();
    }
    { Fl_Slider* o = CarrierFreq = new Fl_Slider(205, 340, 535, 25, "Base frequency of the audio carrier:");
      o->type(5);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->labelcolor(0);
      o->value(0.3);
      o->callback((Fl_Callback*)cb_CarrierFreq);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_DrawShape* o = LfoShape = new Fl_DrawShape(410, 25, 330, 150);
      o->box(FL_DOWN_BOX);
      o->color(51);
      o->selection_color(49);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(56);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_DrawShape* o = CarrierShape = new Fl_DrawShape(410, 180, 330, 155);
      o->box(FL_DOWN_BOX);
      o->color(51);
      o->selection_color(49);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(56);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    make_menu();
    o->end();
  }
}

void LFO3gui::customWave() {
  Fl_Window* w;
  { Fl_Window* o = customWavWindow = new Fl_Window(226, 431, "Custom waveform");
    w = o;
    o->user_data((void*)(this));
    { Fl_Value_Input* o = numHarm[0] = new Fl_Value_Input(10, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(1);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[0] = new Fl_Value_Slider(10, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[1] = new Fl_Value_Input(45, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(2);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[1] = new Fl_Value_Slider(45, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm1);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[2] = new Fl_Value_Input(80, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(3);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[2] = new Fl_Value_Slider(80, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm2);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[3] = new Fl_Value_Input(115, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(4);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[3] = new Fl_Value_Slider(115, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm3);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[4] = new Fl_Value_Input(150, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(5);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[4] = new Fl_Value_Slider(150, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm4);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Input* o = numHarm[5] = new Fl_Value_Input(185, 270, 30, 25, "harm");
      o->labelsize(11);
      o->minimum(1);
      o->maximum(1000);
      o->step(0.5);
      o->value(6);
      o->align(130);
    }
    { Fl_Value_Slider* o = levelHarm[5] = new Fl_Value_Slider(185, 10, 30, 250);
      o->type(4);
      o->box(FL_FLAT_BOX);
      o->selection_color(216);
      o->labelsize(12);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_levelHarm5);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = new Fl_Button(35, 390, 75, 30, "Compute");
      o->callback((Fl_Callback*)cb_Compute);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(120, 390, 75, 30, "Exit");
      o->callback((Fl_Callback*)cb_Exit);
    }
    { Fl_Box* o = new Fl_Box(30, 315, 185, 70, "Build your custom wave with a sum of sinusoids. You can redefine the number a\
nd amplitude of each partial");
      o->labelsize(12);
      o->labelcolor(136);
      o->align(132|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  customWavWindow->show();
}

void LFO3gui::show() {
  mainWindow->show();
}

void LFO3gui::bye() {
  mainWindow->hide();
}

void LFO3gui::joy_callback() {
}

void LFO3gui::LFO_radio_callback(int i) {
}

void LFO3gui::carrier_radio_callback(int i) {
}

void LFO3gui::carrier_freq_callback() {
}

void LFO3gui::customWave_callback(bool isCarr) {
}
